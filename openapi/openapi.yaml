---
openapi: 3.0.3
info:
  title: Red Hat Openshift Smart Events Fleet Manager
  description: The api exposed by the fleet manager of the RHOSE service.
  contact:
    name: Development Team
    email: openbridge-dev@redhat.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
tags:
- name: Bridge API
  description: "The API that allow the user to retrieve, create or delete Bridges."
- name: Errors Catalog API
  description: List and get the error definitions from the error catalog.
- name: Processors API
  description: "The API that allow the user to retrieve, create or delete processors\
    \ of a Bridge."
- name: Shard API
  description: The API that allow a shard to retrieve and update resources.
paths:
  /api/v1/bridges:
    get:
      tags:
      - Bridge API
      summary: Get the list of Bridges
      description: Get the list of Bridges for the authenticated user.
      parameters:
      - name: page
        in: query
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: size
        in: query
        schema:
          format: int32
          default: 100
          maximum: 100
          minimum: 1
          type: integer
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/BridgeResponse'
                  page:
                    format: int64
                    type: integer
                  size:
                    format: int64
                    type: integer
                  total:
                    format: int64
                    type: integer
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    post:
      tags:
      - Bridge API
      summary: Create a Bridge
      description: Create a Bridge for the authenticated user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeRequest'
      responses:
        "202":
          description: Accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                  href:
                    type: string
                  submitted_at:
                    format: date-time
                    type: string
                  published_at:
                    format: date-time
                    type: string
                  status:
                    $ref: '#/components/schemas/ManagedResourceStatus'
                  endpoint:
                    type: string
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/bridges/{bridgeId}:
    get:
      tags:
      - Bridge API
      summary: Get a Bridge
      description: Get a Bridge of the authenticated user by ID.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                  href:
                    type: string
                  submitted_at:
                    format: date-time
                    type: string
                  published_at:
                    format: date-time
                    type: string
                  status:
                    $ref: '#/components/schemas/ManagedResourceStatus'
                  endpoint:
                    type: string
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    delete:
      tags:
      - Bridge API
      summary: Delete a Bridge
      description: Delete a Bridge of the authenticated user by ID.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "202":
          description: Accepted.
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/bridges/{bridgeId}/processors:
    get:
      tags:
      - Processors API
      summary: Get the list of processors of a Bridge
      description: Get the list of processors of a Bridge for the authenticated user.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      - name: page
        in: query
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: size
        in: query
        schema:
          format: int32
          default: 100
          maximum: 100
          minimum: 1
          type: integer
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProcessorResponse'
                  page:
                    format: int64
                    type: integer
                  size:
                    format: int64
                    type: integer
                  total:
                    format: int64
                    type: integer
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    post:
      tags:
      - Processors API
      summary: Create a processor of a Bridge
      description: Create a processor of a Bridge for the authenticated user.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessorRequest'
      responses:
        "202":
          description: Accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                  href:
                    type: string
                  submitted_at:
                    format: date-time
                    type: string
                  published_at:
                    format: date-time
                    type: string
                  status:
                    $ref: '#/components/schemas/ManagedResourceStatus'
                  filters:
                    uniqueItems: true
                    type: array
                    items:
                      $ref: '#/components/schemas/BaseFilter'
                  transformationTemplate:
                    type: string
                  action:
                    $ref: '#/components/schemas/BaseAction'
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/bridges/{bridgeId}/processors/{processorId}:
    get:
      tags:
      - Processors API
      summary: Get a processor of a Bridge
      description: Get a processor of a Bridge for the authenticated user.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      - name: processorId
        in: path
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                  href:
                    type: string
                  submitted_at:
                    format: date-time
                    type: string
                  published_at:
                    format: date-time
                    type: string
                  status:
                    $ref: '#/components/schemas/ManagedResourceStatus'
                  filters:
                    uniqueItems: true
                    type: array
                    items:
                      $ref: '#/components/schemas/BaseFilter'
                  transformationTemplate:
                    type: string
                  action:
                    $ref: '#/components/schemas/BaseAction'
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    delete:
      tags:
      - Processors API
      summary: Delete a processor of a Bridge
      description: Delete a processor of a Bridge for the authenticated user.
      parameters:
      - name: bridgeId
        in: path
        required: true
        schema:
          type: string
      - name: processorId
        in: path
        required: true
        schema:
          type: string
      responses:
        "202":
          description: Accepted.
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
          content:
            application/json: {}
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/errors:
    get:
      tags:
      - Errors Catalog API
      summary: Get the list of errors.
      description: Get the list of errors from the error catalog.
      parameters:
      - name: page
        in: query
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: size
        in: query
        schema:
          format: int32
          default: 100
          maximum: 100
          minimum: 1
          type: integer
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorResponse'
                  page:
                    format: int64
                    type: integer
                  size:
                    format: int64
                    type: integer
                  total:
                    format: int64
                    type: integer
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/errors/{id}:
    get:
      tags:
      - Errors Catalog API
      summary: Get an error from the error catalog.
      description: Get an error from the error catalog.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    format: int32
                    type: integer
                  code:
                    type: string
                  reason:
                    type: string
                  type:
                    $ref: '#/components/schemas/BridgeErrorType'
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/shard/bridges:
    get:
      tags:
      - Shard API
      summary: Get Bridges to be processed by a shard.
      description: Get Bridges to be processed by a shard.
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BridgeDTO'
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    put:
      tags:
      - Shard API
      summary: Update a Bridge.
      description: Update a Bridge.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BridgeDTO'
      responses:
        "200":
          description: Success.
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
  /api/v1/shard/bridges/processors:
    get:
      tags:
      - Shard API
      summary: Get processors to be processed by a shard.
      description: Get processors to be processed by a shard.
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessorDTO'
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
    put:
      tags:
      - Shard API
      summary: Update a processor.
      description: Update a processor.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessorDTO'
      responses:
        "200":
          description: Success.
        "400":
          description: Bad request.
          content:
            application/json: {}
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden.
        "500":
          description: Internal error.
          content:
            application/json: {}
      security:
      - bearer: []
components:
  schemas:
    BaseAction:
      required:
      - type
      - parameters
      type: object
      properties:
        type:
          type: string
          nullable: false
        parameters:
          minProperties: 1
          type: object
          additionalProperties:
            type: string
    BaseFilter:
      required:
      - key
      type: object
      properties:
        type:
          type: string
        key:
          minLength: 1
          type: string
          nullable: false
    BridgeDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        endpoint:
          type: string
        customerId:
          type: string
        status:
          $ref: '#/components/schemas/ManagedResourceStatus'
        kafkaConnection:
          $ref: '#/components/schemas/KafkaConnectionDTO'
    BridgeErrorType:
      enum:
      - PLATFORM
      - USER
      type: string
    BridgeRequest:
      required:
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          nullable: false
    BridgeResponse:
      type: object
      properties:
        kind:
          type: string
        id:
          type: string
        name:
          type: string
        href:
          type: string
        submitted_at:
          format: date-time
          type: string
        published_at:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/ManagedResourceStatus'
        endpoint:
          type: string
    ErrorResponse:
      type: object
      properties:
        kind:
          type: string
        id:
          type: string
        name:
          type: string
        href:
          type: string
        code:
          type: string
        reason:
          type: string
    KafkaConnectionDTO:
      type: object
      properties:
        bootstrapServers:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        securityProtocol:
          type: string
        topic:
          type: string
    ManagedResourceStatus:
      enum:
      - ACCEPTED
      - DELETED
      - DELETING
      - DEPROVISION
      - FAILED
      - PROVISIONING
      - READY
      type: string
    ProcessorDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        definition:
          $ref: '#/components/schemas/ProcessorDefinition'
        bridgeId:
          type: string
        customerId:
          type: string
        status:
          $ref: '#/components/schemas/ManagedResourceStatus'
        kafkaConnection:
          $ref: '#/components/schemas/KafkaConnectionDTO'
    ProcessorDefinition:
      type: object
      properties:
        filters:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseFilter'
        transformationTemplate:
          type: string
        requestedAction:
          $ref: '#/components/schemas/BaseAction'
        resolvedAction:
          $ref: '#/components/schemas/BaseAction'
    ProcessorRequest:
      required:
      - name
      - action
      type: object
      properties:
        name:
          minLength: 1
          type: string
          nullable: false
        filters:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseFilter'
        transformationTemplate:
          type: string
        action:
          allOf:
          - $ref: '#/components/schemas/BaseAction'
          - allOf:
            - $ref: '#/components/schemas/BaseAction'
            - nullable: false
    ProcessorResponse:
      type: object
      properties:
        kind:
          type: string
        id:
          type: string
        name:
          type: string
        href:
          type: string
        submitted_at:
          format: date-time
          type: string
        published_at:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/ManagedResourceStatus'
        filters:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseFilter'
        transformationTemplate:
          type: string
        action:
          $ref: '#/components/schemas/BaseAction'
  securitySchemes:
    bearer:
      type: http
      scheme: Bearer
