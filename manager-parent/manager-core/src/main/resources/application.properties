event-bridge.k8s.orchestrator=${EVENT_BRIDGE_K8S_ORCHESTRATOR:openshift}
event-bridge.manager.url=${EVENT_BRIDGE_MANAGER_URL:http://localhost:8080}

# SLI Metric Names
rhose.metrics-name.operation-total-count=managed_services_api_rhose_operation_count
rhose.metrics-name.operation-success-total-count=managed_services_api_rhose_operation_success_count
rhose.metrics-name.operation-failure-total-count=managed_services_api_rhose_operation_failure_count
rhose.metrics-name.operation-duration-seconds=managed_services_api_rhose_operation_duration_seconds

# Cors
quarkus.http.cors=true

# Database
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${EVENT_BRIDGE_DB_USERNAME}
quarkus.datasource.password=${EVENT_BRIDGE_DB_PASSWORD}
quarkus.datasource.jdbc.url=jdbc:postgresql://${EVENT_BRIDGE_DB_HOST}:${EVENT_BRIDGE_DB_PORT:5432}/${EVENT_BRIDGE_DB_SCHEMA:event-bridge}${EVENT_BRIDGE_DB_CONNECTION_PARAMS:}
quarkus.datasource.jdbc.initial-size=10
quarkus.datasource.jdbc.min-size=10
quarkus.datasource.jdbc.max-size=50
quarkus.datasource.jdbc.leak-detection-interval=5M
quarkus.datasource.jdbc.transaction-isolation-level=read-committed
quarkus.datasource.jdbc.new-connection-sql=select 1;
quarkus.datasource.jdbc.validation-query-sql=select 1;
quarkus.hibernate-orm.jdbc.timezone=UTC

# Flyway
quarkus.flyway.connect-retries=10
quarkus.flyway.migrate-at-start=true
quarkus.flyway.validate-on-migrate=true
quarkus.flyway.ignore-missing-migrations=true
quarkus.flyway.create-schemas=true
quarkus.flyway.placeholders.shard-id=${SHARD_ID}
quarkus.flyway.placeholders.shard-router-canonical-hostname=${SHARD_ROUTER_CANONICAL_HOSTNAME}

# Quartz configuration
quarkus.quartz.clustered=true
quarkus.quartz.store-type=jdbc-cmt

# SSO
quarkus.oidc.auth-server-url=${EVENT_BRIDGE_SSO_URL}
quarkus.oidc.client-id=${EVENT_BRIDGE_SSO_CLIENT_ID}

# AWS Secret manager
quarkus.secretsmanager.endpoint-override=${AWS_ENDPOINT:}
quarkus.secretsmanager.aws.region=${AWS_REGION}
quarkus.secretsmanager.aws.credentials.type=static
quarkus.secretsmanager.aws.credentials.static-provider.access-key-id=${AWS_ACCESS_KEY_ID}
quarkus.secretsmanager.aws.credentials.static-provider.secret-access-key=${AWS_SECRET_ACCESS_KEY}

# Kafka
event-bridge.kafka.bootstrap.servers=${EVENT_BRIDGE_KAFKA_BOOTSTRAP_SERVERS}
event-bridge.kafka.client.id=${EVENT_BRIDGE_KAFKA_CLIENT_ID}
event-bridge.kafka.client.secret=${EVENT_BRIDGE_KAFKA_CLIENT_SECRET}
event-bridge.kafka.security.protocol=${EVENT_BRIDGE_KAFKA_SECURITY_PROTOCOL:SASL_SSL}
event-bridge.kafka.sasl.mechanism=${EVENT_BRIDGE_KAFKA_SASL_MECHANISM:PLAIN}
event-bridge.resource-prefix=ob-

# WorkManager
event-bridge.resources.worker.max-retries=${EVENT_BRIDGE_RESOURCES_WORKERS_MAX_RETRIES:3}
event-bridge.resources.workers.timeout-seconds=${EVENT_BRIDGE_RESOURCES_WORKERS_TIMEOUT_SECONDS:300}
event-bridge.resources.workers.job-retry-interval-seconds=${EVENT_BRIDGE_RESOURCES_WORKERS_JOB_RETRY_INTERVAL_SECONDS:30}

# Native resources
quarkus.native.resources.includes=exception/exceptionInfo.json

# Manager is bringing in the kafka client, it should not be part of the health check
quarkus.kafka.health.enabled=false
mp.messaging.connector.smallrye-kafka.health-enabled=false

# RHOAS
rhoas.timeout-seconds=15
rhoas.ops-account.client-id=fakeClientId
rhoas.max_retries=5
rhoas.jitter=0.1
rhoas.backoff=PT0.5S

# DNS OPENSHIFT
event-bridge.dns.subdomain=${EVENT_BRIDGE_DNS_SUBDOMAIN}
event-bridge.dns.subdomain.tls.certificate=${EVENT_BRIDGE_DNS_SUBDOMAIN_TLS_CERTIFICATE}
event-bridge.dns.subdomain.tls.key=${EVENT_BRIDGE_DNS_SUBDOMAIN_TLS_KEY}
event-bridge.dns.hosted-zone-name=${EVENT_BRIDGE_DNS_HOSTED_ZONE_NAME}
event-bridge.dns.aws.route53.access-key-id=${AWS_ACCESS_KEY_ID}
event-bridge.dns.aws.route53.secret-access-key=${AWS_SECRET_ACCESS_KEY}

# DNS KIND
event-bridge.dns.ingress.override.hostname=${EVENT_BRIDGE_DNS_INGRESS_OVERRIDE_HOSTNAME:localhost}

# LOGGING
# Disable unnecessary fields
quarkus.log.console.json.fields.process-id.enabled=false
quarkus.log.console.json.fields.process-name.enabled=false
quarkus.log.console.json.fields.logger-class-name.enabled=false
quarkus.log.console.json.fields.thread-id.enabled=false
quarkus.log.console.json.fields.sequence.enabled=false
# MGDOBR-453: Enabled logging for Workers
quarkus.log.category."com.redhat.service.smartevents.manager.core.workers".level=DEBUG

# MGDOBR-1009: kafka configuration for poll based error handling (errors are read from global kafka topic)
kafka.bootstrap.servers=${event-bridge.kafka.bootstrap.servers}
kafka.sasl.mechanism=PLAIN
kafka.security.protocol=SASL_SSL
kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${event-bridge.kafka.client.id}" password="${event-bridge.kafka.client.secret}";
mp.messaging.incoming.processing-errors.connector=smallrye-kafka
mp.messaging.incoming.processing-errors.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.processing-errors.group.id=smart-events-fleet-manager
event-bridge.processing-errors.max-errors-per-bridge=100
event-bridge.processing-errors.cleanup.schedule=0 0/5 * * * ? *

# QUOTAS
event-bridge.account-management-service.quota.config=${EVENT_BRIDGE_ACCOUNT_MANAGEMENT_SERVICE_QUOTA_CONFIG}

## ---------------------
## Dev Profile Overrides
## ---------------------
# Database
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/event-bridge
%dev.quarkus.datasource.username=event-bridge
%dev.quarkus.datasource.password=event-bridge
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.log.bind-parameters=true
%dev.quarkus.flyway.placeholders.shard-id=150b23e9-0b34-45b7-a91a-5ec388d03a1d
%dev.quarkus.flyway.placeholders.shard-router-canonical-hostname=default

# SSO
%dev.quarkus.oidc.auth-server-url=http://${minikubeip}:30007/auth/realms/event-bridge-fm
%dev.quarkus.oidc.client-id=event-bridge
%dev.quarkus.oidc.credentials.secret=secret

# Dev Internal kafka
%dev.event-bridge.kafka.bootstrap.servers=my-cluster-kafka-bootstrap.kafka:9092
%dev.event-bridge.kafka.client.id=client-id
%dev.event-bridge.kafka.client.secret=secret
%dev.event-bridge.kafka.security.protocol=PLAINTEXT
%dev.event-bridge.kafka.sasl.mechanism=PLAIN

# AWS Secrets Manager config - dev
%dev.quarkus.secretsmanager.endpoint-override=http://localhost:4566
%dev.quarkus.secretsmanager.aws.region=us-west-1
%dev.quarkus.secretsmanager.aws.credentials.type=static
%dev.quarkus.secretsmanager.aws.credentials.static-provider.access-key-id=test-key
%dev.quarkus.secretsmanager.aws.credentials.static-provider.secret-access-key=test-key

# DNS
%dev.event-bridge.dns.subdomain.tls.certificate=ZmFrZQ==
%dev.event-bridge.dns.subdomain.tls.key=ZmFrZQ==

# LOGGING
# Use unstructured logging in DEV
%dev.quarkus.log.console.json=false

# QUOTAS
%dev.event-bridge.account-management-service.quota.config={"15247674": {"bridges_quota": 1000, "processors_quota": 500}}