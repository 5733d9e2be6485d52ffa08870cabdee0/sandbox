quarkus.swagger-ui.always-include=true

# Database
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${EVENT_BRIDGE_DB_USERNAME}
quarkus.datasource.password=${EVENT_BRIDGE_DB_PASSWORD}
quarkus.datasource.jdbc.url=jdbc:postgresql://${EVENT_BRIDGE_DB_HOST}:${EVENT_BRIDGE_DB_PORT:5432}/${EVENT_BRIDGE_DB_SCHEMA:event-bridge}
quarkus.datasource.jdbc.initial-size=10
quarkus.datasource.jdbc.min-size=10
quarkus.datasource.jdbc.max-size=50
quarkus.datasource.jdbc.leak-detection-interval=5M
quarkus.datasource.jdbc.transaction-isolation-level=read-committed
quarkus.datasource.jdbc.new-connection-sql=select 1;
quarkus.datasource.jdbc.validation-query-sql=select 1;
quarkus.hibernate-orm.jdbc.timezone=UTC
# Flyway
quarkus.flyway.connect-retries=10
quarkus.flyway.migrate-at-start=true
quarkus.flyway.validate-on-migrate=true
quarkus.flyway.ignore-missing-migrations=true
quarkus.flyway.create-schemas=true

# SSO
quarkus.oidc.auth-server-url=${EVENT_BRIDGE_SSO_URL}
quarkus.oidc.client-id=${EVENT_BRIDGE_SSO_CLIENT_ID}

# Shard id to whitelist
event-bridge.shard.id=${SHARD_ID}

# AWS Secret manager
quarkus.secretsmanager.endpoint-override=${AWS_ENDPOINT:}
quarkus.secretsmanager.aws.region=${AWS_REGION}
quarkus.secretsmanager.aws.credentials.type=static 
quarkus.secretsmanager.aws.credentials.static-provider.access-key-id=${AWS_ACCESS_KEY_ID}
quarkus.secretsmanager.aws.credentials.static-provider.secret-access-key=${AWS_SECRET_ACCESS_KEY}

## Dev Profile Overrides
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/event-bridge
%dev.quarkus.datasource.username=event-bridge
%dev.quarkus.datasource.password=event-bridge
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.log.bind-parameters=true

# SSO
%dev.quarkus.oidc.auth-server-url=http://${minikubeip}:30007/auth/realms/event-bridge-fm
%dev.quarkus.oidc.client-id=event-bridge
%dev.quarkus.oidc.credentials.secret=secret
%dev.event-bridge.shard.id=150b23e9-0b34-45b7-a91a-5ec388d03a1d

# Native resources
quarkus.native.resources.includes=exception/exceptionInfo.json

# AWS Secrets Manager config - dev
%dev.quarkus.secretsmanager.endpoint-override=http://localhost:4566
%dev.quarkus.secretsmanager.aws.region=us-west-1
%dev.quarkus.secretsmanager.aws.credentials.type=static 
%dev.quarkus.secretsmanager.aws.credentials.static-provider.access-key-id=test-key
%dev.quarkus.secretsmanager.aws.credentials.static-provider.secret-access-key=test-key

# The Kafka broker location (defaults to localhost:9092)
# This shouldn't be put in the properties see https://issues.redhat.com/browse/MGDOBR-197
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
kafka.client.id=${KAFKA_CLIENT_ID:fake_id}
kafka.client.secret=${KAFKA_CLIENT_SECRET:fake_secret}
kafka.sasl.mechanism=PLAIN
kafka.security.protocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_CLIENT_ID:fake_id}" password="${KAFKA_CLIENT_SECRET:fake_secret}";

# Managed Connectors
managed-connectors.cluster.id=${MC_CLUSTER_ID:fakeClusterId}
managed-connectors.services.url=${MC_SERVICES_URL:fakeServiceURL}
managed-connectors.topic-name=${MC_TOPIC_NAME:test_topic}

managed-connectors.auth.server-url=${MC_AUTH_SERVER_URL:fakeServerUrl}
managed-connectors.auth.client-id=${MC_AUTH_CLIENT_ID:fakeClientId}
managed-connectors.auth.token-path=${MC_AUTH_TOKEN_PATH:fakeTokenPath}
managed-connectors.auth.offline-token=${MC_AUTH_OFFLINE_TOKEN:fakeOfflineToken}

# RHOAS
rhoas.timeout-seconds=60
rhoas.ops-account.client-id=fakeClientId
