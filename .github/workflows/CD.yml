name: Bridge - CD
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE'
      - '**/.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'
      - '.github/**'
      - 'kustomize/**'
      - 'dev/**'
      - 'app-interface/**'
jobs:
  event-bridge-build:
    env:
      FLEET_MANAGER_CONTAINER_NAME: quay.io/5733d9e2be6485d52ffa08870cabdee0/fleet-manager:${{ github.sha }}
      FLEET_SHARD_OPENSHIFT_CONTAINER_NAME: quay.io/5733d9e2be6485d52ffa08870cabdee0/fleet-shard:ocp-${{ github.sha }}
      FLEET_SHARD_MINIKUBE_CONTAINER_NAME: quay.io/5733d9e2be6485d52ffa08870cabdee0/fleet-shard:k8s-${{ github.sha }}
      EXECUTOR_CONTAINER_NAME: quay.io/5733d9e2be6485d52ffa08870cabdee0/executor:${{ github.sha }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.repository == '5733d9e2be6485d52ffa08870cabdee0/sandbox'
    name: Publish JARs and Containers
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Free disk space
        uses: ./.github/actions/free-disk-space
      - name: Java and Maven Setup
        uses: ./.github/actions/java-maven-setup
        with:
          cache-key-prefix: ${{ runner.os }}
      - name: Build JARs
        uses: ./.github/actions/maven
        with:
          maven-command: package --batch-mode -Dmaven.test.skip=true -Dcheckstyle.skip
      - name: Login to Container Registry
        shell: bash
        env:
          CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
        run: docker login quay.io --username $CONTAINER_REGISTRY_USER --password $CONTAINER_REGISTRY_PASSWORD

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            general: &general
              - infra/**
              - bom/**
              - build-parent/**
              - rhoas-client/**
              - processor/**
            manager:
              - *general
              - manager/**
            shard-operator:
              - *general
              - shard-operator/**
              - executor/**
            executor:
              - *general
              - shard-operator/**
              - executor/**

      # run only if 'manager' or any 'general' modules have changed
      - name: Build and Publish JVM Container - Fleet Manager
        if: steps.filter.outputs.manager == 'true'
        run: |
          echo "Building and pushing docker image for Fleet Manager"
          docker build -f docker/Dockerfile.jvm -t $FLEET_MANAGER_CONTAINER_NAME-jvm manager/
          docker push $FLEET_MANAGER_CONTAINER_NAME-jvm

      # run only if 'shard-operator' or any 'general' modules have changed
      - name: Build and Publish JVM Container - Fleet Shard
        if: steps.filter.outputs.shard-operator == 'true'
        run: |
          echo "Building and pushing docker image for Fleet Shard"
          docker build -f docker/Dockerfile.jvm -t $FLEET_SHARD_OPENSHIFT_CONTAINER_NAME-jvm shard-operator/
          docker push $FLEET_SHARD_OPENSHIFT_CONTAINER_NAME-jvm

      # run only if 'executor' or any 'general' modules have changed
      - name: Build and Publish JVM Container - Executor
        if: steps.filter.outputs.executor == 'true'
        run: |
          echo "Building and pushing docker image for Executor"
          docker build -f docker/Dockerfile.jvm -t $EXECUTOR_CONTAINER_NAME-jvm executor/
          docker push $EXECUTOR_CONTAINER_NAME-jvm

      # Build shart operator with Minikube profile if 'shard-operator' or any 'general' modules have changed
      - name: Build Minikube Fleet Shard
        if: steps.filter.outputs.shard-operator == 'true'
        uses: ./.github/actions/maven
        with:
          maven-command: package --batch-mode -Dmaven.test.skip=true -Dcheckstyle.skip -Pminikube
      - name: Build and Publish JVM Container - Minikube Fleet Shard
        if: steps.filter.outputs.shard-operator == 'true'
        run: |
          echo "Building and pushing docker image for Fleet Shard with Minikube profile"
          docker build -f docker/Dockerfile.jvm -t $FLEET_SHARD_MINIKUBE_CONTAINER_NAME-jvm shard-operator/
          docker push $FLEET_SHARD_MINIKUBE_CONTAINER_NAME-jvm
