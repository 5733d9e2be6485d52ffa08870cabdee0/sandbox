name: Shard Operator - CI
on:
  pull_request_target:
    types: [ opened, labeled, unlabeled, synchronize ]
    paths:
      - '.github/workflows/Operator-CI.yaml'
      - 'shard-operator/**'
      - 'shard-operator-integration-tests/**'
jobs:
  event-bridge-build:
    env:
      NAMESPACE: mynamespace
      # This hostname will be used as hostname for the ingress in Kind and is set in the hosts file of the machine
      KIND_MAIN_NODE_HOSTNAME: kind-control-plane 
    concurrency:
      group: event-bridge-operator-pr-${{ github.head_ref }}
      cancel-in-progress: true
    timeout-minutes: 45
    runs-on: ubuntu-latest
    name: Build and Test Operator
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Check labels
        # Security due to https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
        if: ${{ !contains( github.event.pull_request.labels.*.name, 'safe to test') }}
        run: |
          echo "Please add the 'safe to test' label in order to run 'Operator - CI' pipeline if it's safe to test this code"
          exit 1
      - name: Java and Maven Setup
        uses: ./.github/actions/java-maven-setup
        with:
          cache-key-prefix: ${{ runner.os }}
      - name: Re-Checkout  # since Java And Maven Setup step is checking out the main branch, we have to checkout the pull request branch again
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Set up KinD
        uses: ./.github/actions/kind
        with:
          kind-node-hostname: ${{ env.KIND_MAIN_NODE_HOSTNAME }}
        # Tests are executed in different PR check, we just need all artifacts in repository
      - name: Build complete repo
        uses: ./.github/actions/maven
        with:
          maven-command: clean install --no-snapshot-updates --fail-at-end --errors --quiet -Dquickly
        # Build operator image and generate needed operator resources
      - name: Build Shard operator image and resources
        uses: ./.github/actions/maven
        with:
          maven-command: clean install --errors --quiet -Dquarkus.container-image.build=true -Dquarkus.container-image.tag=$GITHUB_SHA -Dquickly -Dquarkus.kubernetes.namespace=$NAMESPACE
          working-directory: shard-operator
        # Load built image into KinD
      - name: Load Shard operator image into KinD
        run: |
          # KinD needs a specific version to skip external image pull, in case of default 'latest' version KinD would try to fetch the image from external location
          kind load docker-image openbridge/shard-operator:$GITHUB_SHA
      - name: Istio Setup
        uses: ./.github/actions/istio-setup
      - name: Install Knative, deploy istio resources and Prometheus ServiceMonitor CRD
        run: |
          chmod +x dev/bin/knative-installer.sh
          ./dev/bin/knative-installer.sh
          kubectl apply -f kustomize/overlays/ci/istio/gateway.yaml
          kubectl apply -f kustomize/overlays/ci/istio/virtual-service-kafka-broker.yaml
          kubectl apply -f kustomize/overlays/ci/istio/jwt-request-authentication.yaml

          # Add Prometheus ServiceMonitor CRD to avoid BridgeIngress Condition Ready: False Type: PrometheusUnavailable
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/v0.9.0/manifests/setup/prometheus-operator-0servicemonitorCustomResourceDefinition.yaml
      - name: Deploy Shard operator
        env:
          DEV_EVENT_BRIDGE_SSO_CLIENT_ID: ${{ secrets.DEV_EVENT_BRIDGE_SSO_CLIENT_ID }}
          DEV_EVENT_BRIDGE_SSO_SECRET: ${{ secrets.DEV_EVENT_BRIDGE_SSO_SECRET }}
        run: |
          kubectl create namespace $NAMESPACE
          # Deploy operator
          kubectl apply -f shard-operator/target/kubernetes/bridgeexecutors.com.redhat.service.bridge-v1.yml
          kubectl apply -f shard-operator/target/kubernetes/bridgeingresses.com.redhat.service.bridge-v1.yml
          kubectl apply -f shard-operator/target/kubernetes/minikube.yml
          kubectl set env deployment/shard-operator EVENT_BRIDGE_SSO_URL=https://sso.redhat.com/auth/realms/redhat-external -n $NAMESPACE
          kubectl set env deployment/shard-operator EVENT_BRIDGE_SSO_CLIENT_ID=$DEV_EVENT_BRIDGE_SSO_CLIENT_ID -n $NAMESPACE
          kubectl set env deployment/shard-operator EVENT_BRIDGE_SSO_SECRET=$DEV_EVENT_BRIDGE_SSO_SECRET -n $NAMESPACE
          kubectl set env deployment/shard-operator EVENT_BRIDGE_EXECUTOR_IMAGE=quay.io/5733d9e2be6485d52ffa08870cabdee0/empty-it-image:1.0 -n $NAMESPACE
          kubectl wait --for=condition=available --timeout=120s deployment/shard-operator -n $NAMESPACE
      - name: Run integration tests
        env:
          IT_SHARD_KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.IT_SHARD_KAFKA_BOOTSTRAP_SERVERS }}
          IT_SHARD_KAFKA_USER: ${{ secrets.IT_SHARD_KAFKA_USER }}
          IT_SHARD_KAFKA_PASSWORD: ${{ secrets.IT_SHARD_KAFKA_PASSWORD }}
          IT_SHARD_KAFKA_TOPIC_NAME: ${{ secrets.IT_SHARD_KAFKA_TOPIC_NAME }}
        uses: ./.github/actions/maven
        with:
          maven-command: clean verify -Pcucumber -Dparallel -Dit.shard.kafka.bootstrap.servers=$IT_SHARD_KAFKA_BOOTSTRAP_SERVERS -Dit.shard.kafka.user=$IT_SHARD_KAFKA_USER -Dit.shard.kafka.password=$IT_SHARD_KAFKA_PASSWORD -Dit.shard.kafka.topic.name=$IT_SHARD_KAFKA_TOPIC_NAME -Dit.shard.kafka.protocol=SASL_SSL -Dit.shard.kafka.sasl.mechanism=PLAIN
          working-directory: shard-operator-integration-tests
      - name: Archive test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cucumber-logs
          path: shard-operator-integration-tests/target/logs/**/*.*
      - name: Print operator log
        if: always()
        run: |
          kubectl logs deployment/shard-operator -n $NAMESPACE
