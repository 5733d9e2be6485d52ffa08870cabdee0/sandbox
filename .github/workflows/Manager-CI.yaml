name: Manager - CI
on:
  pull_request_target:
    types: [opened, labeled, unlabeled, synchronize]
    branches:    
      - 'main'
    paths-ignore:
      - 'LICENSE'
      - '**/.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'
      - '.github/**'
      - 'kustomize/**'
      - 'dev/**'
jobs:
  event-bridge-build:
    env:
      FLEET_MANAGER_CONTAINER_NAME: openbridge/fleet-manager:${{ github.sha }}
      FLEET_SHARD_MINIKUBE_CONTAINER_NAME: openbridge/fleet-shard:${{ github.sha }}
      EXECUTOR_CONTAINER_NAME: openbridge/executor:${{ github.sha }}
      INGRESS_CONTAINER_NAME: openbridge/ingress:${{ github.sha }}
    concurrency:
      group: event-bridge-manager-pr-${{ github.head_ref }}
      cancel-in-progress: true
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.repository == '5733d9e2be6485d52ffa08870cabdee0/sandbox'
    name: Build all images and run E2E tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Check labels
        # Security due to https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
        if: ${{ !contains( github.event.pull_request.labels.*.name, 'safe to test') }}
        run: |
          echo "Please add the 'safe to test' label in order to run 'Manager - CI' pipeline if it's safe to test this code"
          exit 1
      - name: Java and Maven Setup
        uses: ./.github/actions/java-maven-setup
        with:
          cache-key-prefix: ${{ runner.os }}
      - name: Re-Checkout  # since Java And Maven Setup step is checking out the main branch, we have to checkout the pull request branch again
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
      - name: Set up KinD
        uses: ./.github/actions/kind
      - uses: imranismail/setup-kustomize@v1
      - name: Use built Fleet manager and operator images
        run: |
          kustomize edit set image event-bridge-manager=$FLEET_MANAGER_CONTAINER_NAME
          kustomize edit set image event-bridge-shard-operator=$FLEET_SHARD_MINIKUBE_CONTAINER_NAME
        working-directory: kustomize/overlays/minikube
      - name: Use built Ingress and Executor images
        run: |
          sed -i -E "s|(.*EVENT_BRIDGE_EXECUTOR_IMAGE:).*|\1 $EXECUTOR_CONTAINER_NAME|" overlays/minikube/shard/patches/deploy-config.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_INGRESS_IMAGE:).*|\1 $INGRESS_CONTAINER_NAME|" overlays/minikube/shard/patches/deploy-config.yaml
        working-directory: kustomize
      - name: Configure correct Keycloak endpoints for Fleet manager and operator
        run: |
          sed -i -E "s|(.*http://).*:30007(.*)|\1keycloak.keycloak.svc.cluster.local:8180\2|" overlays/minikube/shard/patches/deploy-config.yaml
          sed -i -E "s|(.*http://).*:30007(.*)|\1keycloak.keycloak.svc.cluster.local:8180\2|" overlays/minikube/manager/patches/deploy-config.yaml
        working-directory: kustomize
      - name: Configure external Managed Kafka cluster
        shell: bash
        env:
          MANAGED_KAFKA_BOOTSTRAP_SERVER: ${{ secrets.MANAGED_KAFKA_BOOTSTRAP_SERVER }}
          MANAGED_KAFKA_ADMIN_CLIENT_ID: ${{ secrets.MANAGED_KAFKA_ADMIN_CLIENT_ID }}
          MANAGED_KAFKA_ADMIN_CLIENT_SECRET: ${{ secrets.MANAGED_KAFKA_ADMIN_CLIENT_SECRET }}
          MANAGED_KAFKA_OPS_CLIENT_ID: ${{ secrets.MANAGED_KAFKA_OPS_CLIENT_ID }}
          MANAGED_KAFKA_OPS_CLIENT_SECRET: ${{ secrets.MANAGED_KAFKA_OPS_CLIENT_SECRET }}
          MANAGED_KAFKA_MC_CLIENT_ID: ${{ secrets.MANAGED_KAFKA_MC_CLIENT_ID }}
          MANAGED_KAFKA_MC_CLIENT_SECRET: ${{ secrets.MANAGED_KAFKA_MC_CLIENT_SECRET }}
          MANAGED_CONNECTORS_AUTH_OFFLINE_TOKEN: ${{ secrets.MANAGED_CONNECTORS_AUTH_OFFLINE_TOKEN }}
          MANAGED_CONNECTORS_CLUSTER_ID: ${{ secrets.MANAGED_CONNECTORS_CLUSTER_ID }}
        run: |
          sed -i -E "s|(.*EVENT_BRIDGE_KAFKA_BOOTSTRAP_SERVERS=).*|\1$MANAGED_KAFKA_BOOTSTRAP_SERVER|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_KAFKA_CLIENT_ID=).*|\1$MANAGED_KAFKA_OPS_CLIENT_ID|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_KAFKA_CLIENT_SECRET=).*|\1$MANAGED_KAFKA_OPS_CLIENT_SECRET|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_RHOAS_INSTANCE_API_HOST=).*|\1https://admin-server-$MANAGED_KAFKA_BOOTSTRAP_SERVER/rest|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_RHOAS_SSO_MAS_CLIENT_ID=).*|\1$MANAGED_KAFKA_ADMIN_CLIENT_ID|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_RHOAS_SSO_MAS_CLIENT_SECRET=).*|\1$MANAGED_KAFKA_ADMIN_CLIENT_SECRET|" kustomization.yaml
          sed -i -E "s|(.*RHOAS_OPS_ACCOUNT_CLIENT_ID=).*|\1$MANAGED_KAFKA_OPS_CLIENT_ID|" kustomization.yaml
          sed -i -E "s|(.*EVENT_BRIDGE_RESOURCE_PREFIX=).*|\1ci-$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT-|" kustomization.yaml
          sed -i -E "s|(.*MANAGED_CONNECTORS_CLUSTER_ID=).*|\1$MANAGED_CONNECTORS_CLUSTER_ID|" kustomization.yaml
          sed -i -E "s|(.*MANAGED_CONNECTORS_KAFKA_BOOTSTRAP_SERVERS=).*|\1$MANAGED_KAFKA_BOOTSTRAP_SERVER|" kustomization.yaml
          sed -i -E "s|(.*MANAGED_CONNECTORS_KAFKA_CLIENT_ID=).*|\1$MANAGED_KAFKA_MC_CLIENT_ID|" kustomization.yaml
          sed -i -E "s|(.*MANAGED_CONNECTORS_KAFKA_CLIENT_SECRET=).*|\1$MANAGED_KAFKA_MC_CLIENT_SECRET|" kustomization.yaml
          sed -i -E "s|(.*MANAGED_CONNECTORS_AUTH_OFFLINE_TOKEN=).*|\1$MANAGED_CONNECTORS_AUTH_OFFLINE_TOKEN|" kustomization.yaml
          sed -e ':a;s/^\(  - [A-Z_]\+_SECRET\=[^=]\{4\}x*\)[^x]/\1x/;t a' -e ':b;s/^\(  - [A-Z_]\+\=[^=]\{12\}x*\)[^x]/\1x/;t b' kustomization.yaml
        working-directory: kustomize/overlays/minikube/manager
      - name: Build all images and resources
        uses: ./.github/actions/maven
        with:
          maven-command: clean install --errors --quiet -Pminikube -Dquickly
      - name: Build and Publish JVM Container - Fleet Manager
        run: |
          docker build -f docker/Dockerfile.jvm -t $FLEET_MANAGER_CONTAINER_NAME manager/
          kind load docker-image $FLEET_MANAGER_CONTAINER_NAME
      - name: Build and Publish JVM Container - Minikube Fleet Shard
        run: |
          docker build -f docker/Dockerfile.jvm -t $FLEET_SHARD_MINIKUBE_CONTAINER_NAME shard-operator/
          kind load docker-image $FLEET_SHARD_MINIKUBE_CONTAINER_NAME
      - name: Build and Publish JVM Container - Executor
        run: |
          docker build -f docker/Dockerfile.jvm -t $EXECUTOR_CONTAINER_NAME executor/
          kind load docker-image $EXECUTOR_CONTAINER_NAME
      - name: Build and Publish JVM Container - Ingress
        run: |
          docker build -f docker/Dockerfile.jvm -t $INGRESS_CONTAINER_NAME ingress/
          kind load docker-image $INGRESS_CONTAINER_NAME
      - name: Install all resources
        run: kustomize build overlays/minikube | oc apply -f -
        working-directory: kustomize
        continue-on-error: true
      - name: Install all resources, second attempt (first one fails as CRD is not properly propagated fast enough)
        run: kustomize build overlays/minikube | oc apply -f -
        working-directory: kustomize
      - name: Wait for Keycloak to start
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/keycloak -n keycloak
          timeout 120 bash -c 'while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}'' http://localhost:30007/auth)" != "303" ]]; do sleep 5; done'
      - name: Configure bearer token for tests
        run: |
          TOKEN=$(kubectl exec -n keycloak deployment/keycloak -- curl --insecure -X POST http://keycloak.keycloak.svc.cluster.local:8180/auth/realms/event-bridge-fm/protocol/openid-connect/token --user event-bridge:secret -H 'content-type: application/x-www-form-urlencoded' -d 'username=kermit&password=thefrog&grant_type=password' | jq --raw-output '.access_token')
          echo "OB_TOKEN=$TOKEN" >> $GITHUB_ENV
        working-directory: kustomize
      - name: Update all resources and delete current operator pod(to refresh operator config)
        run: |
          kustomize build overlays/minikube | oc apply -f -
          oc delete pod --selector=app=event-bridge-shard-operator -n event-bridge-operator
        working-directory: kustomize
      - name: Wait for operator and manager to start
        run: |
          kubectl wait --for=condition=available --timeout=240s deployment/event-bridge-shard-operator -n event-bridge-operator
          kubectl wait --for=condition=available --timeout=600s deployment/event-bridge -n event-bridge-manager
      - name: Run integration tests
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TOKEN: ${{ secrets.SLACK_WEBHOOK_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          WEBHOOK_SITE_UUID: ${{ secrets.WEBHOOK_SITE_UUID }}
        uses: ./.github/actions/maven
        with:
          maven-command: clean verify -Pcucumber -Devent-bridge.manager.url=http://localhost:80/manager
          working-directory: integration-tests
      - name: Print operator log
        if: always()
        run: |
          kubectl logs deployment/event-bridge-shard-operator -n event-bridge-operator
      - name: Print manager log
        if: always()
        run: |
          kubectl logs deployment/event-bridge -n event-bridge-manager
